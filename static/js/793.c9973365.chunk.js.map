{"version":3,"file":"static/js/793.c9973365.chunk.js","mappings":"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","sources":["webpack://react-camas-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-camas-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://react-camas-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__862nS\",\"posts\":\"MyPosts_posts__E+SOT\",\"myposts_textarea\":\"MyPosts_myposts_textarea__5TuXC\",\"myposts_button\":\"MyPosts_myposts_button__tghEb\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__HG8HL\",\"item_info\":\"Post_item_info__Eg1Ew\",\"post_text\":\"Post_post_text__I97F9\",\"post_likes\":\"Post_post_likes__YxqLn\"};","import React from \"react\";\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n   return (\r\n            <div className={classes.item}>\r\n               <div>\r\n                  <img src=\"https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-Vector.png\"/>\r\n               </div>\r\n               \r\n               <div className={classes.item_info}>\r\n                  <div className={classes.post_text}>\r\n                     {props.message}\r\n                  </div>\r\n                  <div className={classes.post_likes}>\r\n                     <span><i>Likes:</i> <b><i>{props.like}</i></b></span>\r\n                  </div>\r\n               </div>\r\n               \r\n            </div>\r\n   )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nlet AddNewPostForm = (props) => {\r\n   //когда данные собраны, вызываем функцию handleSubmit, которая перерисовывает каждое действие\r\n   return(\r\n      <form onSubmit={props.handleSubmit}>      \r\n         <div>\r\n            <Field className={classes.myposts_textarea} name=\"newPostText\" component={Textarea} placeholder=\"Post message\" validate={[required, maxLengthCreator(10)]} />\r\n         </div>\r\n         <div className={classes.myposts_button}>\r\n            <button>Add post </button>\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)      //обернули AddNewPostForm в reduxForm, дали уникальное имя\r\nconst MyPosts = (props) => {\r\n\r\n   //использовалось в классовых компонентах\r\n   /* shouldComponentUpdate(nextProps, nextState) {\r\n      return nextProps != this.props || nextState != this.state \r\n   } */\r\n\r\n      //создали новый массив объектов на основе массива posts, который выведет столько постов, сколько придет \r\n      let postsElements = props.posts.map( (post) => {\r\n         return(\r\n            <Post message={post.messege} like={post.likesCount} key={post.id}/>\r\n         )\r\n      } )\r\n\r\n      //функция, которая считывает, что ввел пользователь\r\n      let onAddPost = (values) => {\r\n         props.addPost(values.newPostText)\r\n      }\r\n\r\n      return (\r\n         <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n               {\r\n                  postsElements\r\n               }\r\n            </div>\r\n         </div>\r\n      )\r\n   \r\n}\r\n\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state) => {            //перерисовываем компоненту myPosts когда изменится posts\r\n   return {\r\n      posts: state.profilePage.posts,\r\n      newPostText: state.profilePage.newPostText\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n      addPost: (newPostText) => {\r\n         dispatch(addPostActionCreator(newPostText))\r\n      }\r\n   }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)      //каждый раз когда происходят изменения в state запускается эта функция\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__pgddO\",\"descriptionBlock_avatar\":\"ProfileInfo_descriptionBlock_avatar__uDyWX\"};","import React, { useEffect, useState } from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n   let [editMode, setEditMode] = useState(false)      //присвоили в editMode - false, а в setEditMode функцию, меняющую это значение\r\n   let [status, setStatus] = useState(props.status)\r\n\r\n   useEffect( () => {\r\n      setStatus(props.status)\r\n   }, [props.status] )     //указали, что зависем от props.status и будем перерисовывать всегда, когда будет новый props.status отличаться от старого\r\n   \r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n   }\r\n\r\n   const deactivateEditMode = () => {\r\n      setEditMode(false)\r\n      props.updateStatus(status)     //обновляем статус, взяв его из value input-a\r\n   } \r\n\r\n   const onStatusChange = (event) => {\r\n      setStatus(event.currentTarget.value)\r\n   }\r\n\r\n   return (\r\n      //условие вывода span или input\r\n      <div>\r\n         {  !editMode &&\r\n            <div>\r\n               {props.status ? <span onDoubleClick={activateEditMode}><b>Личный статус: </b>{props.status}</span> : <span onDoubleClick={activateEditMode}><b>Личный статус: </b>{props.status}Пустой статус</span>}\r\n            </div>\r\n         }\r\n         { editMode &&\r\n            <div>\r\n               <input onChange={ onStatusChange } autoFocus={true} onBlur={ deactivateEditMode } value={ status } />\r\n            </div>\r\n         }\r\n      </div>\r\n   )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n   if (!profile) {\r\n      return <Preloader/>\r\n   }\r\n   return (\r\n      <div>\r\n         <div className={classes.descriptionBlock}>\r\n            <div className={classes.descriptionBlock_avatar}>\r\n               <img src={profile.photos.small !== null ? profile.photos.large : 'https://www.pngall.com/wp-content/uploads/12/Avatar-Profile-Vector.png' } width='150px'/>\r\n            </div>\r\n            <div>\r\n               <div><b>Ник-нейм:</b> {profile.fullName}</div>\r\n               {profile.aboutMe ? <div><b>Про меня:</b> {profile.aboutMe}</div> : <div></div>}\r\n               {profile.contacts.vk ? <div><b>Мой вк:</b> {profile.contacts.vk}</div> : <div></div>}\r\n               <div><b>Рабочий статус:</b> { profile.lookingForAJob ? 'В поисках работы' : 'Безработный' } </div>\r\n               <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport classes from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Profile = (props) => {\r\n   return (\r\n   <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n   </div>\r\n   )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\"\r\nimport { compose } from \"redux\";\r\nimport { getStatus } from \"../../redux/profile-reducer\";\r\nimport { updateStatus } from \"../../redux/profile-reducer\";\r\nimport withRouter from \"../common/WithRouter/withRouter\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n   componentDidMount() {\r\n\t\tlet userId = this.props.router.params.userId;\r\n      //укажем, что если нет userId то выведем нас\r\n\t\tif (!userId) { \r\n         userId = this. props.autorizedUserId;\r\n         if(!userId) {\r\n            this.props.router.navigate('/login');     //если userId не оказалось, редиректим на login\r\n         }\r\n      }\r\n      this.props.getUserProfile(userId)\r\n      this.props.getStatus(userId)\r\n\t}\r\n   \r\n   render() {\r\n      return (\r\n         <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>  //используем ... т.к. хотим передать сразу все пропсы дальше\r\n         )\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n   profile: state.profilePage.profile,\r\n   status: state.profilePage.status,\r\n   autorizedUserId: state.auth.userId,\r\n   isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n   withRouter,\r\n   /* withAuthRedirect */\r\n)(ProfileContainer)"],"names":["props","className","classes","src","message","like","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","maxLengthCreator","postsElements","posts","map","post","messege","likesCount","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","activateEditMode","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","profile","photos","small","large","width","fullName","aboutMe","contacts","vk","lookingForAJob","Preloader","ProfileContainer","userId","this","router","params","autorizedUserId","navigate","getUserProfile","getStatus","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}